import random


# _____________________________________________ PLANT, FLOWERS CLASS __________________________________________________
class Plant:
    def __init__(self, title, price):
        self.plant_title = title
        self.plant_price = price

    def __str__(self):
        return f'{self.plant_title}'

    def show_plant(self):
        print(f'–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è: {self.plant_title}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {self.plant_price}')


class Flowers(Plant):
    def __init__(self, title, price):
        super().__init__(title, price)
        self.count = self.random_count()

    @staticmethod
    def random_count():
        count = random.randint(2, 5)
        return count

    def __str__(self):
        return f'{self.plant_title} | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {self.count} —à—Ç.'

    def delete_count(self):
        self.count -= 1
        return self.count


# _________________________________________ COLLECTION CLASS____________________________________________________________
class Collection:
    def __init__(self, *recept):
        self.book = list(recept)

    def __str__(self):
        return f'{self.book}'

    def add_potion(self, potion):
        if type(potion) is not Alchemy:
            print('–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–ª–∞—Å—Å –ê–ª—Ö–∏–º–∏—è')
        self.book.append(potion)

    def show_book(self):
        count = 0
        for potion in self.book:
            count += 1
            print('---------------------------------------------------------------------------------------------------')
            print(f'{count}. {potion}')


# ____________________________________________ INVENTORY CLASS ________________________________________________________
class Inventory:
    def __init__(self):
        self.plant = []
        self.potion = []
        self.flower = []

    def show_inventory(self):
        count_plant = 'ü™¥'
        count_potion = 'üß™'
        count_flower = 'üå∏'

        print('–†–∞—Å—Ç–µ–Ω–∏—è –≤ –ø–æ–¥—Å—É–º–∫–µ: ')
        for plant in self.plant:
            print(f'{count_plant} {plant}')
        print('-------------------------------------------------------------------------------------------------')

        print('–ó–µ–ª—å—è –≤ –ø–æ–¥—Å—É–º–∫–µ:')
        for potion in self.potion:
            print(f'{count_potion} {potion.potion}')
        print('-------------------------------------------------------------------------------------------------')

        print('–£—Ä–æ–∂–∞—è –≤ –ø–æ–¥—Å—É–º–∫–µ: ')
        for flower in self.flower:
            print(f'{count_flower} {flower.plant_title} {flower.count} —à—Ç.')

    def add_plant(self, *plants):
        for plant in plants:
            if type(plant) is not Plant:
                raise '–†–∞—Å—Ç–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–ª–∞—Å—Å–∞ Plant'
            self.plant.append(plant)

    def add_potion(self, *potions):
        for potion in potions:
            if type(potion) is not Alchemy:
                raise '–ó–µ–ª—å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–ª–∞—Å—Å–∞ Alchemy'
            self.potion.append(potion)

    def add_flowers(self, *harvest):
        for flower in harvest:
            if type(flower) is not Flowers:
                raise '–¶–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–ª–∞—Å—Å–∞ Flowers'
            self.flower.append(flower)

    def delete_plant(self, seed):
        self.plant.remove(seed)
        return self.plant

    def delete_potion(self, del_potion):
        self.potion.remove(del_potion)
        return self.potion

    def delete_flowers(self):
        for flowers in self.flower:
            if flowers.count <= 0:
                self.flower.remove(flowers)
        return self.flower


# ________________________________________________ ALCHEMY CLASS________________________________________________________
class Alchemy:
    def __init__(self, potion, effect, *ingredient):
        self.potion = potion
        self.ingredient = ingredient
        self.effect = effect
        self.smell = self.smell_cooking(potion)

        if self.valid_ingredient(self.ingredient) < 1:
            raise '–ó–µ–ª—å—é –Ω—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç.'
        if self.valid_ingredient(ingredient) > 2:
            raise '–£ –∑–µ–ª—å—è –º–∞–∫—Å–∏–º—É–º 2 –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞.'

    @staticmethod
    def valid_ingredient(ingredients):
        count = len(ingredients)
        return count

    @staticmethod
    def unpacking_ingredient(plants):
        if len(plants) == 1:
            for i in plants:
                return f'{i}'
        elif len(plants) == 2:
            for i in plants:
                return f'{i}, {plants[plants.index(i) + 1]}'

    @staticmethod
    def smell_cooking(potion):  # –†–∞–Ω–¥–æ–º–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤–∫–∏ –∑–µ–ª—å—è
        smell = ['–í—Å—Ç—Ä–µ—á–∞ –∞–±—Å–æ–ª—é –≤–∞–Ω–∏–ª–∏ –∏ –±–æ–±–æ–≤ —Ç–æ–Ω–∫–∞, –æ—Ç—Ç–µ–Ω–µ–Ω–Ω–∞—è –º–∞—Å–ª–æ–º —Å–∞–Ω–¥–∞–ª–æ–≤–æ–≥–æ –¥–µ—Ä–µ–≤–∞.\n',
                 '–°–≤–µ—Ä–∫–∞—é—â–∏–π –±–µ—Ä–≥–∞–º–æ—Ç, –∂–∞—Å–º–∏–Ω —Å–∞–º–±–∞–∫ –∏ –±–µ–ª—ã–π –º—É—Å–∫—É—Å —Å–ø–ª–µ—Ç–∞—é—Ç—Å—è –≤–æ–µ–¥–∏–Ω–æ –≤ –æ–±—ä–µ–º–Ω—É—é,\n '
                 '–æ–±–≤–æ–ª–∞–∫–∏–≤–∞—é—â—É—é –∫–æ–º–ø–æ–∑–∏—Ü–∏—é., –õ–∏—Å—Ç —Ñ–∏–∞–ª–∫–∏, –º–∞–Ω–¥–∞—Ä–∏–Ω –∏ –∫–∞—Ä–¥–∞–º–æ–Ω –ø—Ä–∏–æ—Ç–∫—Ä—ã–≤–∞—é—Ç –∑–∞–≤–µ—Å—É —Ç–∞–π–Ω—ã –∏ –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç\n'
                 '–≤–ø–µ—Ä—ë–¥ —Ç—É–º–∞–Ω–Ω—ã–π –ª–∞–¥–∞–Ω, –º—É—Å–∫–∞—Ç–Ω—ã–π –æ—Ä–µ—Ö, –ª–∞–±–¥–∞–Ω—É–º –∏ –∞–±—Å–æ–ª—é—Ç —Ä–æ–∑—ã.']
        if potion == '–ê–º–æ—Ä—Ç–µ–Ω—Ü–∏—è':
            return (f'–î—É—ç—Ç –¥–∞–º–∞—Å—Å–∫–æ–π —Ä–æ–∑—ã –∏ –ø–∏–æ–Ω–∞ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –±–ª–∞–≥–æ—Ä–æ–¥—Å—Ç–≤–æ–º, –ø–æ–¥–æ–±–Ω–æ —Å—Ç—Ä–∞—Å—Ç–Ω—ã–º –∏ —Å–∏—è—é—â–∏–º —ç–º–æ—Ü–∏—è–º.\n'
                    f'–ú—è–≥–∫–∏–π, –ª–µ–≥–∫–∏–π –∞–∫–∫–æ—Ä–¥ –±–µ–ª–æ–≥–æ –º—É—Å–∫—É—Å–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –±—É–∫–µ—Ç –∞—Ä–æ–º–∞—Ç–∞, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é—â–µ–≥–æ –∏—Å—Ç–æ—Ä–∏—é –ª—é–±–≤–∏.\n')
        if potion == '–§–µ–ª–∏–∫—Å –§–µ–ª–∏—Ü–∏—Å':
            return (f'–í–æ–∑–¥—É—Ö –ø—Ä–æ–Ω–∏–∑–∞–Ω –ª–µ–≥–∫–∏–º–∏ —Ü–≤–µ—Ç–æ—á–Ω—ã–º–∏ –æ—Ç—Ç–µ–Ω–∫–∞–º–∏ –∫—Ä–∞—Å–Ω–æ–≥–æ –∂–∞—Å–º–∏–Ω–∞ –∏ —Ä–æ–∑—ã, –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–º–∏ —è—Ä–∫–∏–º–∏\n'
                    f'–∞–∫–∫–æ—Ä–¥–∞–º–∏ –∑–µ–ª–µ–Ω–æ–≥–æ –º–∞–Ω–¥–∞—Ä–∏–Ω–∞ –∏ –º—è—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑–æ–≤—ã—Ö —É—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏—Ö –Ω–æ—Ç –º—É—Å–∫—É—Å–∞ –∏ –∞–º–±—Ä–µ—Ç—Ç—ã.\n')
        if potion == '–û–±–æ—Ä–æ—Ç–Ω–æ–µ':
            return (f'–ê—Ä–æ–º–∞—Ç —Å –∑–µ–ª–µ–Ω–æ-–º—É—Å–∫—É—Å–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–æ—Ç—ã –≤–µ—Ç–∏–≤–µ—Ä–∞ —Å–º–µ—à–∏–≤–∞—é—Ç—Å—è —Å –Ω–æ—Ç–∞–º–∏ –¥–µ—Ä–µ–≤–∞,\n'
                    f'–æ–∫—É—Ç–∞–Ω–Ω–æ–≥–æ –ø–ª—é—â–æ–º, —Å –∫–æ–∂–∞–Ω–æ–π –æ—Å–Ω–æ–≤–æ–π.')
        if potion == '–ó–µ–ª—å–µ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è':
            return (f'–ß–∞—Ä—É—é—â–∞—è —Å–ª–∞–¥–æ—Å—Ç—å –≤–∞–Ω–∏–ª–∏ –∏ —Å–∞—Ö–∞—Ä–Ω–æ–π –ø—É–¥—Ä—ã –¥–æ–ø–æ–ª–Ω—è—é—Ç –Ω–æ—Ç—ã –≤–æ–∑–¥—É—à–Ω–æ–π —Å–∞—Ö–∞—Ä–Ω–æ–π –≤–∞—Ç—ã, –º—É—Å–∫—É—Å–∞,\n'
                    f'—Å–≤–µ–∂–∏—Ö –∫—Ä–∞—Å–Ω—ã—Ö —è–≥–æ–¥ –∏ –∫–∞—Ä–∞–º–µ–ª–∏.')
        if potion == '–ñ–∏–≤–∞—è –°–º–µ—Ä—Ç—å':
            return (f'–ù–∞—Å—ã—â–µ–Ω–Ω—ã–π —à–ª–µ–π—Ñ –∏–∑ —á—É–≤—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–æ—Ç –ø–µ—Ä—É–∞–Ω—Å–∫–æ–≥–æ –±–∞–ª—å–∑–∞–º–∞, –æ–±–∂–∞—Ä–µ–Ω–Ω—ã—Ö –±–æ–±–æ–≤ —Ç–æ–Ω–∫–∞, —Å–∞–Ω–¥–∞–ª–æ–≤–æ–≥–æ\n'
                    f'–¥–µ—Ä–µ–≤–∞, –≤–µ—Ç–∏–≤–µ—Ä–∞ –∏ –∫–µ–¥—Ä–∞.')
        else:
            smell_random = random.choice(smell)
            return smell_random

    def __str__(self):
        return f'{self.potion} | –°–æ—Å—Ç–∞–≤: {self.unpacking_ingredient(self.ingredient)}\n–≠—Ñ—Ñ–µ–∫—Ç: {self.effect}'

    def show_potion(self):
        print(f'{self.potion} | –°–æ—Å—Ç–∞–≤: {self.unpacking_ingredient(self.ingredient)}\n–≠—Ñ—Ñ–µ–∫—Ç: {self.effect}')

    @staticmethod
    def cook_potion(finished_potion):
        return finished_potion


# __________________________________________________ GAME CLASS _____________________________________________________
class Game:
    def __init__(self):
        self.balance = 100

    def show_balance(self):
        print(f'–í –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ {self.balance} ü™ô')

    @staticmethod
    def plant_flower(seeds):
        flower = Flowers(seeds.plant_title, seeds.plant_price)
        return flower

    def pay_plant(self, price_plant):
        if (self.balance - price_plant.plant_price) < 0:
            print(f'–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ü™ô')
        else:
            self.balance -= price_plant.plant_price
            return self.balance

    def sell_potion(self):
        price_potion = random.randint(10, 50)
        self.balance += price_potion
        print(f'–ó–µ–ª—å–µ –ø—Ä–æ–¥–∞–Ω–æ –∑–∞ {price_potion} ü™ô')
        return self.balance


# ------------------------------------------------------ FUNCTION -----------------------------------------------------
def yes_or_no(collection):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–µ–ª—å–µ
    show = input('1 = –î–∞ 2 = –ù–µ—Ç\n–û—Ç–≤–µ—Ç _____')
    if show == '2':
        pass
    if show == '1':
        return collection.show_book()


def choice_recept(recipes):  # –í—ã–±–æ—Ä –∑–µ–ª—å—è –¥–ª—è –≥–æ—Ç–æ–≤–∫–∏
    for recept in recipes:
        print(f'üßæ {recept}')
        choice = input('–í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç —Ä–µ—Ü–µ–ø—Ç? 1 = –î–∞ | 2 = –ù–µ—Ç | 0 = –í—ã—Ö–æ–¥\n–û—Ç–≤–µ—Ç _____')
        if choice == '1':
            return recept
        if choice == '2':
            pass
        if choice == '0':
            return 0


def find_ingredient(herb):  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç—ã –≤ –ø–æ–¥—Å—É–º–∫–µ —Å —Å–æ—Å—Ç–∞–≤–æ–º –∑–µ–ª—å—è
    counting = []
    for flower in inventory.flower:
        for ingredient in herb.ingredient:
            if flower.plant_title == ingredient.plant_title:
                counting.append(flower)
    if len(counting) == 0:
        return f'–£ –≤–∞—Å –Ω–µ—Ç —Ü–≤–µ—Ç–æ—á–∫–æ–≤ –¥–ª—è –∑–µ–ª—å—è ü•Ä'
    if len(counting) == 1:
        for count in counting:
            for ingredient in herb.ingredient:
                if count.plant_title != ingredient.plant_title:
                    return f'–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: üå∏ {count.plant_title}'
    if len(counting) == 2:
        for flower in counting:
            flower.delete_count()
        print(f'–ù–∞—á–∏–Ω–∞–µ–º –≤–∞—Ä–∏—Ç—å! ‚öóÔ∏è')
        result = result_cooking()
        return result


def find_flowers(herb):  # –£–¥–∞–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ—á–∫–æ–≤ –ø–æ—Å–ª–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∑–µ–ª—å—è
    flowers = []
    for flower in inventory.flower:
        for ingredient in herb.ingredient:
            if flower.plant_title == ingredient.plant_title:
                flowers.append(flower)

    for flower in flowers:
        flower.delete_count()


def result_cooking():  # –†–∞–Ω–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    list_result = ['–í–∑—Ä—ã–≤ üí•', '–ó–µ–ª—å–µ –≤–∞—Ä–∏—Ç—Å—è ‚öóÔ∏è', '–ó–µ–ª—å–µ –≤–∞—Ä–∏—Ç—Å—è ‚öóÔ∏è', '–ó–µ–ª—å–µ –≤–∞—Ä–∏—Ç—Å—è ‚öóÔ∏è']
    result = random.choice(list_result)
    return result


def pour_fire(pers):
    fire = input('1 = –ü–æ—Ç—É—à–∏—Ç—å —Å–∞–º–æ–º—É\n2 = –í—ã–∑–≤–∞—Ç—å –ø–æ–∂–∞—Ä–Ω—ã—Ö\n–û—Ç–≤–µ—Ç _____')
    if fire == '1':
        print(f'üßØüí¶üßØüí¶üßØüí¶üßØüí¶üßØüí¶üßØüí¶üßØüí¶\n–ü–æ—Ç—É—à–µ–Ω–æ!')
    if fire == '2':
        person.balance -= 15
        print('üöíüßë‚Äçüöíüë©‚Äçüöíüöíüßë‚Äçüöíüë©‚Äçüöíüöíüßë‚Äçüöíüë©‚Äçüöíüöíüßë‚Äçüöíüë©‚Äçüöíüöíüßë‚Äçüöíüë©‚Äçüöí\n–ü–æ—Ç—É—à–µ–Ω–æ! –ó–∞ —É—Å–ª—É–≥—É —Å–ø–∏—Å–∞–Ω–æ 15 ü™ô.')
        return pers.balance


def show_smell(potion):   # –í—ã–≤–æ–¥–∏—Ç –∑–∞–ø–∞—Ö –∑–µ–ª—å—è
    print(f'üçÉ{potion.smell}üçÉ')


def choice_plant(plants):  # –ü–µ—Ä–µ–±–∏—Ä–∞–µ—Ç —Å–µ–º–µ–Ω–∞ –≤ –ø–æ–¥—Å—É–º–∫–µ –∏ –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –æ–±—ä–µ–∫—Ç —Å–µ–º–µ–Ω–∞
    emoji = ['üå∏', 'üíÆ', 'ü™∑', 'ü™ª', 'üåø', 'üçÄ', 'üçÅ', '‚òòÔ∏è']
    for plant in plants:
        print(f'{random.choice(emoji)} {plant}')
        choice = input('–í—ã–±—Ä–∞—Ç—å —ç—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏–µ? 1 = –î–∞ | 2 = –ù–µ—Ç | 0 = –í—ã—Ö–æ–¥ _____')
        if choice == '1':
            return plant
        if choice == '2':
            pass
        if choice == '0':
            break


def choice_potion(inventory_potion):   # –ü–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –∑–µ–ª—å—è –≤ –ø–æ–¥—Å—É–º–∫–µ
    for potion in inventory_potion:
        print(f'{'üß™'} {potion.potion}')
        choice = input('–í—ã–±—Ä–∞—Ç—å —ç—Ç–æ –∑–µ–ª—å–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏? 1 = –î–∞ | 2 = –ù–µ—Ç | 0 = –í—ã—Ö–æ–¥ _____')
        if choice == '1':
            return potion
        if choice == '2':
            pass
        if choice == '0':
            break


# ------------------------------------------------------- PLANT ----------------------------------------------------
plant1 = Plant("–®–∞–ª—Ñ–µ–π", 10)
plant2 = Plant("–†–æ–º–∞—à–∫–∞", 15)
plant3 = Plant("–ü–æ–ª—ã–Ω—å", 5)
plant4 = Plant("–í–∞–ª–µ—Ä—å—è–Ω–∞", 15)
plant5 = Plant("–ß–∞–±—Ä–µ—Ü", 25)
plant6 = Plant("–†–∞—Å—Ç–æ–ø—ã—Ä–Ω–∏–∫", 17)
plant7 = Plant("–®–∫—É—Ä–∞ –ë—É–º—Å–ª–∞–Ω–≥–∞", 12)
plant8 = Plant("–í–æ–¥–æ—Ä–æ—Å–ª–∏", 5)
plant9 = Plant("–ú–∞–π–æ—Ä–∞–Ω", 19)
plant10 = Plant("–¢—ã—Å—è—á–µ–ª–∏—Å—Ç–Ω–∏–∫", 30)

plant_shop = [plant1, plant2, plant3, plant4, plant5, plant6, plant7, plant8, plant9, plant10]

# -------------------------------------------------- RECEPT POTION--------------------------------------------------
recept1 = Alchemy('–ó–µ–ª—å–µ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è', '–ó–µ–ª—å–µ, –≤—ã–∑—ã–≤–∞—é—â–µ–µ —Å–º–µ—Ö —É –≤—ã–ø–∏–≤—à–µ–≥–æ –µ–≥–æ.', plant1, plant2)
recept2 = Alchemy('–ñ–∏–≤–∞—è –°–º–µ—Ä—Ç—å', '–û—á–µ–Ω—å —Å–∏–ª—å–Ω–æ–µ —É—Å—ã–ø–ª—è—é—â–µ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ.', plant3, plant4)
recept3 = Alchemy('–§–µ–ª–∏–∫—Å –§–µ–ª–∏—Ü–∏—Å', '–í—ã–ø–∏–≤—à–µ–º—É –µ–≥–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Å–æ–ø—É—Ç—Å—Ç–≤—É–µ—Ç —É–¥–∞—á–∞ –≤–æ –≤—Å–µ—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏—è—Ö.',
                  plant5, plant6)
recept4 = Alchemy('–û–±–æ—Ä–æ—Ç–Ω–æ–µ', '–í—ã–ø–∏–≤—à–∏–π –µ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ –æ–¥–∏–Ω —á–∞—Å –∏ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ —Ç–æ—Ç, —á—å–∏ —á–∞—Å—Ç–∏—á–∫–∏ '
                               '(–≤–æ–ª–æ—Å—ã, –Ω–æ–≥—Ç–∏ –∏ —Ç. –ø.) –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∑–µ–ª—å–µ.', plant7, plant8)
recept5 = Alchemy('–ê–º–æ—Ä—Ç–µ–Ω—Ü–∏—è', '–õ—é–±–æ–≤–Ω–æ–µ –∑–µ–ª—å–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–∑–¥–∞—ë—Ç –Ω–µ–ø—Ä–µ–æ–¥–æ–ª–∏–º–æ–µ –≤–ª–µ—á–µ–Ω–∏–µ –∫ —Ç–æ–º—É,'
                                ' –∫—Ç–æ —Å–≤–∞—Ä–∏–ª –∑–µ–ª—å–µ.', plant9, plant10)

# ------------------------------------------------- COLLECTION -------------------------------------------------------
collection_potion = Collection(recept1, recept2, recept3, recept4, recept5)

# --------------------------------------------------- INVENTORY ------------------------------------------------------
inventory = Inventory()

# ------------------------------------------------------ GAME --------------------------------------------------------
person = Game()




















# flower1 = Flowers("–®–∞–ª—Ñ–µ–π", 10)
# flower2 = Flowers("–†–æ–º–∞—à–∫–∞", 15)
# flower7 = Flowers("–®–∫—É—Ä–∞ –ë—É–º—Å–ª–∞–Ω–≥–∞", 12)
# flower8 = Flowers("–í–æ–¥–æ—Ä–æ—Å–ª–∏", 5)
# inventory.add_plant(plant8, plant9, plant6)
# inventory.add_potion(recept5)
# inventory.add_flowers(flower7, flower8, flower1)



